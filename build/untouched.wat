(module
 (type $none_=>_none (func))
 (global $assembly/types/Move.AskInsurance i32 (i32.const 0))
 (global $assembly/types/Move.Double i32 (i32.const 1))
 (global $assembly/types/Move.Hit i32 (i32.const 2))
 (global $assembly/types/Move.NoInsurance i32 (i32.const 3))
 (global $assembly/types/Move.Split i32 (i32.const 4))
 (global $assembly/types/Move.Stand i32 (i32.const 5))
 (global $assembly/types/Move.Surrender i32 (i32.const 6))
 (global $assembly/types/ChartMove.AskInsurance i32 (i32.const 0))
 (global $assembly/types/ChartMove.Double i32 (i32.const 1))
 (global $assembly/types/ChartMove.Hit i32 (i32.const 2))
 (global $assembly/types/ChartMove.NoInsurance i32 (i32.const 3))
 (global $assembly/types/ChartMove.Split i32 (i32.const 4))
 (global $assembly/types/ChartMove.Stand i32 (i32.const 5))
 (global $assembly/types/ChartMove.Surrender i32 (i32.const 6))
 (global $assembly/types/ChartMove.DoubleOrHit i32 (i32.const 7))
 (global $assembly/types/ChartMove.DoubleOrStand i32 (i32.const 8))
 (global $assembly/types/ChartMove.SplitOrDouble i32 (i32.const 9))
 (global $assembly/types/ChartMove.SplitOrHit i32 (i32.const 10))
 (global $assembly/types/ChartMove.SplitOrStand i32 (i32.const 11))
 (global $assembly/types/ChartMove.SurrenderOrHit i32 (i32.const 12))
 (global $assembly/types/ChartMove.SurrenderOrSplit i32 (i32.const 13))
 (global $assembly/types/ChartMove.SurrenderOrStand i32 (i32.const 14))
 (global $assembly/types/HandWinner.Player i32 (i32.const 0))
 (global $assembly/types/HandWinner.Dealer i32 (i32.const 1))
 (global $assembly/types/HandWinner.Push i32 (i32.const 2))
 (global $assembly/types/ChartType.Hard i32 (i32.const 0))
 (global $assembly/types/ChartType.Soft i32 (i32.const 1))
 (global $assembly/types/ChartType.Splits i32 (i32.const 2))
 (global $assembly/types/GameStep.PlayHandsLeft i32 (i32.const 0))
 (global $assembly/types/GameStep.PlayHandsRight i32 (i32.const 1))
 (global $assembly/types/GameStep.Start i32 (i32.const 2))
 (global $assembly/types/GameStep.WaitingForInsuranceInput i32 (i32.const 3))
 (global $assembly/types/GameStep.WaitingForNewGameInput i32 (i32.const 4))
 (global $assembly/types/GameStep.WaitingForPlayInput i32 (i32.const 5))
 (global $assembly/types/Suit.Hearts i32 (i32.const 0))
 (global $assembly/types/Suit.Diamonds i32 (i32.const 1))
 (global $assembly/types/Suit.Clubs i32 (i32.const 2))
 (global $assembly/types/Suit.Spades i32 (i32.const 3))
 (global $assembly/types/Rank.Ace i32 (i32.const 0))
 (global $assembly/types/Rank.Two i32 (i32.const 1))
 (global $assembly/types/Rank.Three i32 (i32.const 2))
 (global $assembly/types/Rank.Four i32 (i32.const 3))
 (global $assembly/types/Rank.Five i32 (i32.const 4))
 (global $assembly/types/Rank.Six i32 (i32.const 5))
 (global $assembly/types/Rank.Seven i32 (i32.const 6))
 (global $assembly/types/Rank.Eight i32 (i32.const 7))
 (global $assembly/types/Rank.Nine i32 (i32.const 8))
 (global $assembly/types/Rank.Ten i32 (i32.const 9))
 (global $assembly/types/Rank.Jack i32 (i32.const 10))
 (global $assembly/types/Rank.Queen i32 (i32.const 11))
 (global $assembly/types/Rank.King i32 (i32.const 12))
 (global $assembly/types/PlayerStrategy.UserInput i32 (i32.const 0))
 (global $assembly/types/PlayerStrategy.BasicStrategy i32 (i32.const 1))
 (global $assembly/types/PlayerStrategy.BasicStrategyI18 i32 (i32.const 2))
 (global $assembly/types/PlayerStrategy.Dealer i32 (i32.const 3))
 (global $assembly/types/BlackjackPayout.ThreeToTwo i32 (i32.const 0))
 (global $assembly/types/BlackjackPayout.SixToFive i32 (i32.const 1))
 (global $assembly/types/GameMode.Default i32 (i32.const 0))
 (global $assembly/types/GameMode.Pairs i32 (i32.const 1))
 (global $assembly/types/GameMode.Uncommon i32 (i32.const 2))
 (global $assembly/types/GameMode.Illustrious18 i32 (i32.const 3))
 (global $~lib/memory/__data_end i32 (i32.const 8))
 (global $~lib/memory/__stack_pointer (mut i32) (i32.const 16392))
 (global $~lib/memory/__heap_base i32 (i32.const 16392))
 (memory $0 0)
 (table $0 1 funcref)
 (elem $0 (i32.const 1))
 (export "run" (func $assembly/index/run))
 (export "memory" (memory $0))
 (func $assembly/index/run
  nop
 )
)
